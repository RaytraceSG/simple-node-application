name: Docker image build and publish
run-name: Running Docker image build and publish by ${{ github.actor }}

on:
  push:
    branches:
      - main
    paths:
      - files/**
    # inputs:
    #   path_to_dockerfile:
    #     description: Path to the dockerfile (default = 'Dockerfile')
    #     default: "files/Dockerfile"
    #     type: string
    #   docker_build_dir:
    #     description: Docker build directory (default = '.')
    #     default: "files"
    #     type: string
    #   image_tag:
    #     description: Tag to apply to images.
    #     type: string
    #     default: snapshot-artifact
    #   lifecycle_policy_file:
    #     description: Path to the lifecycle policy JSON file (default = 'policy.json')
    #     default: "e2e-test/policy.json"
    #     type: string
    #   backend_s3_bucket:
    #     description: Name of the S3bucket for Terraform backend
    #     default: "terraform-backend-primary-region"
    #     type: string
    #   backend_iam_role:
    #     description: Name of the Terraform backend assumable IAM Role
    #     default: "workload-assumable-role"
    #     type: string
    #   github_iam_role:
    #     description: Name of the IAM Role for adding access to ECR repo
    #     default: "github-actions-role"
    #     type: string
    #   aws_account_id:
    #     description: AWS Account ID
    #     type: string
    #   aws_region:
    #     description: Target AWS Region
    #     default: "us-east-1"
    #     type: string
    #   backend_dynamodb_table:
    #     description: DynamoDB table for State lock
    #     default: "terraform-backend-ddb"
    #     type: string

# concurrency required to avoid terraform lock contention during ECR provisioning
# concurrency: ci-${{ github.repository }}-docker-pipeline

jobs:
  Get-Tag:
    runs-on: ubuntu-latest
    outputs:
      LATEST_TAG: ${{ steps.get_latest_tag.outputs.LATEST_TAG }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch All Tags
        run: git fetch --tags

      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          echo "LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)" >> "$GITHUB_OUTPUT"
          echo "LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)"

      - name: Output Latest Tag
        run: echo "The latest tag is ${{ steps.get_latest_tag.outputs.LATEST_TAG }}"

  Docker-Image-Create-And-Publish:
    runs-on: ubuntu-latest
    needs: Get-Tag
    defaults:
      run:
        shell: bash
        working-directory: files

    # outputs:
    #   image_tag: ${{ steps.build-publish.outputs.image_tag }}
    #   full_image: ${{ steps.build-publish.outputs.full_image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.REGION }}

      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v3

      # - name: Terraform fmt
      #   id: fmt
      #   run: terraform fmt -check

      # - name: Terraform Init
      #   id: init
      #   run: terraform init -no-color

      # - name: Terraform Validate
      #   id: validate
      #   run: terraform validate -no-color

      # - name: Terraform Plan
      #   id: plan
      #   run: terraform plan -input=false -no-color
      #   continue-on-error: true

      # - name: prepare ECR repo name based on the Github repository
      #   shell: bash
      #   run: |
      #     set -eux
      #     # lowercase the name
      #     repo="${GITHUB_REPOSITORY,,}"

      #     # replace / with _
      #     echo "ECR_REPO_NAME=${repo//\//_}" >> $GITHUB_ENV

      # - name: TF init
      #   shell: bash
      #   run: |
      #     set -eux
      #     terraform init -upgrade -reconfigure \
      #       -backend-config='skip_metadata_api_check=true' \
      #       -backend-config='skip_region_validation=true' \
      #       -backend-config='skip_credentials_validation=true' \
      #       -backend-config='region=${{ inputs.aws_region }}' \
      #       -backend-config='bucket=${{ inputs.backend_s3_bucket }}' \
      #       -backend-config='key=docker-ecr/terraform-${{ env.ECR_REPO_NAME }}.tfstate' \
      #       -backend-config='dynamodb_table=${{ inputs.backend_dynamodb_table }}' \
      #       -backend-config='role_arn=arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ inputs.backend_iam_role }}'
      #   working-directory: ${{ github.action_path }}

      # - name: Create ECR repo [TF apply]
      #   shell: bash
      #   run: |
      #     set -eux
      #     terraform apply \
      #       -var 'repository_name=${{ env.ECR_REPO_NAME }}' \
      #       -var 'lifecycle_policy=${{ inputs.lifecycle_policy_file }}' \
      #       -var 'iam_role=arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ inputs.github_iam_role }}' \
      #       -var 'aws_account_id=${{ inputs.aws_account_id }}' \
      #       -auto-approve
      #   working-directory: ${{ github.action_path }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build, tag, and push docker image to Amazon ECR Public
        id: build-publish
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          ECR_REGISTRY_ALIAS: sctp-sandbox
          ECR_REPOSITORY: azmi-nodejs-app
          IMAGE_TAG: ${{ steps.get_latest_tag.outputs.LATEST_TAG }}.${{ github.run_number }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "full_image=$ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG"

      # - name: Build, tag, and push image to Amazon ECR
      #   id: build-publish
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
      #     IMAGE_TAG: ${{ inputs.image_tag }}
      #   run: |
      #     docker build "${{ inputs.docker_build_dir }}" -f "${{ inputs.path_to_dockerfile }}" -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      #     docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  Docker-Test:
    runs-on: ubuntu-latest
    needs: Docker-Image-Create-And-Publish
    defaults:
      run:
        shell: bash
        working-directory: files

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get EC2 Instance ID
        id: ec2-instance
        run: |
          instance_id=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=azmi1-nodejs-ec2" --query "Reservations[].Instances[].InstanceId" --output text)
          echo "::set-output name=instance_id::$instance_id"

      - name: Get EC2 Public IP
        id: ec2-public-ip
        run: |
          ip_address=$(aws ec2 describe-instances --instance-ids ${{ steps.ec2-instance.outputs.instance_id }} --query "Reservations[].Instances[].PublicIpAddress" --output text)
          # echo "Public IP: $ip_address"
          echo "::set-output name=ip_address::$ip_address"

      - name: Pull Docker image from Public ECR
        run: |
          docker pull public.ecr.aws/your-public-repo:your-tag

      - name: Run Docker container on EC2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          ECR_REGISTRY_ALIAS: sctp-sandbox
          ECR_REPOSITORY: azmi-nodejs-app
          IMAGE_TAG: ${{ steps.get_latest_tag.outputs.LATEST_TAG }}.${{ github.run_number }}
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/azmi1-tf-private-key.pem ec2-user@${{ steps.ec2-public-ip.outputs.ip_address }} '
          docker run -dp 8080:8080 $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG
          '
