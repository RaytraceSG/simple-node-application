name: Docker run and test
run-name: Running Docker test and publish by ${{ github.actor }}

on:
  workflow_dispatch:
    branches:
      - main

jobs:
  Docker-Test:
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.ec2-instance.outputs.instance_id }}
      ip_address: ${{ steps.ec2-public-ip.outputs.ip_address }}
    needs: Docker-Image-Create-And-Publish
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.REGION }}

      - name: Get EC2 Instance ID
        id: ec2-instance
        run: |
          instance_id=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=azmi1-nodejs-ec2" --query "Reservations[].Instances[].InstanceId" --output text)
          echo instance_id=$instance_id >> "$GITHUB_OUTPUT"

      - name: Get EC2 Public IP
        id: ec2-public-ip
        run: |
          ip_address=$(aws ec2 describe-instances --instance-ids ${{ steps.ec2-instance.outputs.instance_id }} --query "Reservations[].Instances[].PublicIpAddress" --output text)
          # echo "Public IP: $ip_address"
          echo ip_address=$ip_address >> "$GITHUB_OUTPUT"

      - name: Pull Private Key
        run: |
          echo "${{ secrets.PRIVATE_KEY }}" > private-key.pem
          chmod 400 private-key.pem

      - name: Run Docker container on EC2
        env:
          ECR_REGISTRY: public.ecr.aws
          ECR_REGISTRY_ALIAS: sctp-sandbox
          ECR_REPOSITORY: azmi1-nodejs-app
          IMAGE_TAG: ${{ needs.Get-Tag.outputs.LATEST_TAG }}.${{ github.run_number }}
        run: |
          ssh -o StrictHostKeyChecking=no -i private-key.pem ec2-user@${{ steps.ec2-public-ip.outputs.ip_address }} '
          docker pull $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG
          docker run -dp 8080:8080 $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG
          '
