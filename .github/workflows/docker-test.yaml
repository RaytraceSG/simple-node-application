name: Docker run and test
run-name: Running Docker run and test by ${{ github.actor }}

on:
  workflow_dispatch:
    branches:
      - main

jobs:
  Get-Image:
    runs-on: ubuntu-latest
    outputs:
      LATEST_IMAGE: ${{ steps.get_latest_image.outputs.LATEST_IMAGE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.REGION }}

      - name: Get Latest Image
        env:
          ECR_REPOSITORY: azmi1-nodejs-app
        id: get_latest_image
        run: |
          LATEST_IMAGE=$(aws ecr-public describe-images --repository-name $ECR_REPOSITORY --query 'sort_by(imageDetails,&imagePushedAt)[-1].imageTags' --output text)
          echo LATEST_IMAGE=$LATEST_IMAGE >> "$GITHUB_OUTPUT"

      - name: Output Latest Image
        run: echo "The latest image is ${{ steps.get_latest_image.outputs.LATEST_IMAGE }}"

  Docker-Test:
    runs-on: ubuntu-latest
    outputs:
      INSTANCE_ID: ${{ steps.ec2-instance.outputs.INSTANCE_ID }}
      IP_ADDRESS: ${{ steps.ec2-public-ip.outputs.IP_ADDRESS }}
    needs: Get-Image
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.REGION }}

      - name: Get EC2 Instance ID
        id: ec2-instance
        env:
          EC2_INSTANCE: azmi1-nodejs-ec2
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$EC2_INSTANCE" --query "Reservations[].Instances[].InstanceId" --output text)
          echo INSTANCE_ID=$INSTANCE_ID >> "$GITHUB_OUTPUT"

      - name: Get EC2 Public IP
        id: ec2-public-ip
        run: |
          IP_ADDRESS=$(aws ec2 describe-instances --instance-ids ${{ steps.ec2-instance.outputs.INSTANCE_ID }} --query "Reservations[].Instances[].PublicIpAddress" --output text)
          # echo "Public IP: $IP_ADDRESS"
          echo IP_ADDRESS=$IP_ADDRESS >> "$GITHUB_OUTPUT"

      - name: Pull Private Key
        run: |
          echo "${{ secrets.PRIVATE_KEY }}" > private-key.pem
          chmod 400 private-key.pem

      - name: Run Docker container on EC2
        env:
          ECR_REGISTRY: public.ecr.aws
          ECR_REGISTRY_ALIAS: sctp-sandbox
          ECR_REPOSITORY: azmi1-nodejs-app
          IMAGE_TAG: ${{ needs.Get-Image.outputs.LATEST_IMAGE }}
        run: |
          ssh -o StrictHostKeyChecking=no -i private-key.pem ec2-user@${{ steps.ec2-public-ip.outputs.IP_ADDRESS }} "sudo docker pull $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG && sudo docker run -dp 8080:8080 $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Wait for 15sec
        run: sleep 15

      - name: Test Connectivity
        run: |
          curl ${{ steps.ec2-public-ip.outputs.IP_ADDRESS }}:8080
